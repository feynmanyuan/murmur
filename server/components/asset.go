// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/html/index.html
// static/js/flexible.js
// static/js/test.js
// static/murmur-vue/.babelrc
// static/murmur-vue/.editorconfig
// static/murmur-vue/.eslintignore
// static/murmur-vue/.eslintrc.js
// static/murmur-vue/.git
// static/murmur-vue/.gitignore
// static/murmur-vue/.postcssrc.js
// static/murmur-vue/README.md
// static/murmur-vue/build/build.js
// static/murmur-vue/build/check-versions.js
// static/murmur-vue/build/logo.png
// static/murmur-vue/build/utils.js
// static/murmur-vue/build/vue-loader.conf.js
// static/murmur-vue/build/webpack.base.conf.js
// static/murmur-vue/build/webpack.dev.conf.js
// static/murmur-vue/build/webpack.prod.conf.js
// static/murmur-vue/config/dev.env.js
// static/murmur-vue/config/index.js
// static/murmur-vue/config/prod.env.js
// static/murmur-vue/index.html
// static/murmur-vue/package.json
// static/murmur-vue/src/App.vue
// static/murmur-vue/src/components/ProfileMine.vue
// static/murmur-vue/src/main.js
// static/murmur-vue/src/router/index.js
// static/murmur-vue/static/.gitkeep
// static/murmur-vue/static/imgs/avatar.jpg
// static/murmur-vue/static/imgs/fav.ico
// static/murmur-vue/yarn.lock

package asset

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataStaticHtmlIndexhtml reads file data from disk. It returns an error on failure.
func bindataStaticHtmlIndexhtml() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/html/index.html"
	name := "static/html/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticJsFlexiblejs reads file data from disk. It returns an error on failure.
func bindataStaticJsFlexiblejs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/js/flexible.js"
	name := "static/js/flexible.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticJsTestjs reads file data from disk. It returns an error on failure.
func bindataStaticJsTestjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/js/test.js"
	name := "static/js/test.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBabelrc reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBabelrc() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.babelrc"
	name := "static/murmur-vue/.babelrc"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueEditorconfig reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueEditorconfig() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.editorconfig"
	name := "static/murmur-vue/.editorconfig"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueEslintignore reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueEslintignore() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.eslintignore"
	name := "static/murmur-vue/.eslintignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueEslintrcjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueEslintrcjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.eslintrc.js"
	name := "static/murmur-vue/.eslintrc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueGit reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueGit() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.git"
	name := "static/murmur-vue/.git"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueGitignore reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueGitignore() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.gitignore"
	name := "static/murmur-vue/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvuePostcssrcjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvuePostcssrcjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/.postcssrc.js"
	name := "static/murmur-vue/.postcssrc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueREADMEmd reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueREADMEmd() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/README.md"
	name := "static/murmur-vue/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildBuildjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildBuildjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/build.js"
	name := "static/murmur-vue/build/build.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildCheckversionsjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildCheckversionsjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/check-versions.js"
	name := "static/murmur-vue/build/check-versions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildLogopng reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildLogopng() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/logo.png"
	name := "static/murmur-vue/build/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildUtilsjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildUtilsjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/utils.js"
	name := "static/murmur-vue/build/utils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildVueloaderconfjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildVueloaderconfjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/vue-loader.conf.js"
	name := "static/murmur-vue/build/vue-loader.conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildWebpackbaseconfjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildWebpackbaseconfjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/webpack.base.conf.js"
	name := "static/murmur-vue/build/webpack.base.conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildWebpackdevconfjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildWebpackdevconfjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/webpack.dev.conf.js"
	name := "static/murmur-vue/build/webpack.dev.conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueBuildWebpackprodconfjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueBuildWebpackprodconfjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/build/webpack.prod.conf.js"
	name := "static/murmur-vue/build/webpack.prod.conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueConfigDevenvjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueConfigDevenvjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/config/dev.env.js"
	name := "static/murmur-vue/config/dev.env.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueConfigIndexjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueConfigIndexjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/config/index.js"
	name := "static/murmur-vue/config/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueConfigProdenvjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueConfigProdenvjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/config/prod.env.js"
	name := "static/murmur-vue/config/prod.env.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueIndexhtml reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueIndexhtml() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/index.html"
	name := "static/murmur-vue/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvuePackagejson reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvuePackagejson() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/package.json"
	name := "static/murmur-vue/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueSrcAppvue reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueSrcAppvue() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/src/App.vue"
	name := "static/murmur-vue/src/App.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueSrcComponentsProfileMinevue reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueSrcComponentsProfileMinevue() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/src/components/ProfileMine.vue"
	name := "static/murmur-vue/src/components/ProfileMine.vue"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueSrcMainjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueSrcMainjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/src/main.js"
	name := "static/murmur-vue/src/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueSrcRouterIndexjs reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueSrcRouterIndexjs() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/src/router/index.js"
	name := "static/murmur-vue/src/router/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueStaticGitkeep reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueStaticGitkeep() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/static/.gitkeep"
	name := "static/murmur-vue/static/.gitkeep"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueStaticImgsAvatarjpg reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueStaticImgsAvatarjpg() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/static/imgs/avatar.jpg"
	name := "static/murmur-vue/static/imgs/avatar.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueStaticImgsFavico reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueStaticImgsFavico() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/static/imgs/fav.ico"
	name := "static/murmur-vue/static/imgs/fav.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticMurmurvueYarnlock reads file data from disk. It returns an error on failure.
func bindataStaticMurmurvueYarnlock() (*asset, error) {
	path := "/Users/feynmanyuan/projects/blockchain/golang/riceis/src/bytemurmur.com/server/static/murmur-vue/yarn.lock"
	name := "static/murmur-vue/yarn.lock"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"static/html/index.html":                           bindataStaticHtmlIndexhtml,
	"static/js/flexible.js":                            bindataStaticJsFlexiblejs,
	"static/js/test.js":                                bindataStaticJsTestjs,
	"static/murmur-vue/.babelrc":                       bindataStaticMurmurvueBabelrc,
	"static/murmur-vue/.editorconfig":                  bindataStaticMurmurvueEditorconfig,
	"static/murmur-vue/.eslintignore":                  bindataStaticMurmurvueEslintignore,
	"static/murmur-vue/.eslintrc.js":                   bindataStaticMurmurvueEslintrcjs,
	"static/murmur-vue/.git":                           bindataStaticMurmurvueGit,
	"static/murmur-vue/.gitignore":                     bindataStaticMurmurvueGitignore,
	"static/murmur-vue/.postcssrc.js":                  bindataStaticMurmurvuePostcssrcjs,
	"static/murmur-vue/README.md":                      bindataStaticMurmurvueREADMEmd,
	"static/murmur-vue/build/build.js":                 bindataStaticMurmurvueBuildBuildjs,
	"static/murmur-vue/build/check-versions.js":        bindataStaticMurmurvueBuildCheckversionsjs,
	"static/murmur-vue/build/logo.png":                 bindataStaticMurmurvueBuildLogopng,
	"static/murmur-vue/build/utils.js":                 bindataStaticMurmurvueBuildUtilsjs,
	"static/murmur-vue/build/vue-loader.conf.js":       bindataStaticMurmurvueBuildVueloaderconfjs,
	"static/murmur-vue/build/webpack.base.conf.js":     bindataStaticMurmurvueBuildWebpackbaseconfjs,
	"static/murmur-vue/build/webpack.dev.conf.js":      bindataStaticMurmurvueBuildWebpackdevconfjs,
	"static/murmur-vue/build/webpack.prod.conf.js":     bindataStaticMurmurvueBuildWebpackprodconfjs,
	"static/murmur-vue/config/dev.env.js":              bindataStaticMurmurvueConfigDevenvjs,
	"static/murmur-vue/config/index.js":                bindataStaticMurmurvueConfigIndexjs,
	"static/murmur-vue/config/prod.env.js":             bindataStaticMurmurvueConfigProdenvjs,
	"static/murmur-vue/index.html":                     bindataStaticMurmurvueIndexhtml,
	"static/murmur-vue/package.json":                   bindataStaticMurmurvuePackagejson,
	"static/murmur-vue/src/App.vue":                    bindataStaticMurmurvueSrcAppvue,
	"static/murmur-vue/src/components/ProfileMine.vue": bindataStaticMurmurvueSrcComponentsProfileMinevue,
	"static/murmur-vue/src/main.js":                    bindataStaticMurmurvueSrcMainjs,
	"static/murmur-vue/src/router/index.js":            bindataStaticMurmurvueSrcRouterIndexjs,
	"static/murmur-vue/static/.gitkeep":                bindataStaticMurmurvueStaticGitkeep,
	"static/murmur-vue/static/imgs/avatar.jpg":         bindataStaticMurmurvueStaticImgsAvatarjpg,
	"static/murmur-vue/static/imgs/fav.ico":            bindataStaticMurmurvueStaticImgsFavico,
	"static/murmur-vue/yarn.lock":                      bindataStaticMurmurvueYarnlock,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"static": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"index.html": {Func: bindataStaticHtmlIndexhtml, Children: map[string]*bintree{}},
		}},
		"js": {Func: nil, Children: map[string]*bintree{
			"flexible.js": {Func: bindataStaticJsFlexiblejs, Children: map[string]*bintree{}},
			"test.js": {Func: bindataStaticJsTestjs, Children: map[string]*bintree{}},
		}},
		"murmur-vue": {Func: nil, Children: map[string]*bintree{
			".babelrc": {Func: bindataStaticMurmurvueBabelrc, Children: map[string]*bintree{}},
			".editorconfig": {Func: bindataStaticMurmurvueEditorconfig, Children: map[string]*bintree{}},
			".eslintignore": {Func: bindataStaticMurmurvueEslintignore, Children: map[string]*bintree{}},
			".eslintrc.js": {Func: bindataStaticMurmurvueEslintrcjs, Children: map[string]*bintree{}},
			".git": {Func: bindataStaticMurmurvueGit, Children: map[string]*bintree{}},
			".gitignore": {Func: bindataStaticMurmurvueGitignore, Children: map[string]*bintree{}},
			".postcssrc.js": {Func: bindataStaticMurmurvuePostcssrcjs, Children: map[string]*bintree{}},
			"README.md": {Func: bindataStaticMurmurvueREADMEmd, Children: map[string]*bintree{}},
			"build": {Func: nil, Children: map[string]*bintree{
				"build.js": {Func: bindataStaticMurmurvueBuildBuildjs, Children: map[string]*bintree{}},
				"check-versions.js": {Func: bindataStaticMurmurvueBuildCheckversionsjs, Children: map[string]*bintree{}},
				"logo.png": {Func: bindataStaticMurmurvueBuildLogopng, Children: map[string]*bintree{}},
				"utils.js": {Func: bindataStaticMurmurvueBuildUtilsjs, Children: map[string]*bintree{}},
				"vue-loader.conf.js": {Func: bindataStaticMurmurvueBuildVueloaderconfjs, Children: map[string]*bintree{}},
				"webpack.base.conf.js": {Func: bindataStaticMurmurvueBuildWebpackbaseconfjs, Children: map[string]*bintree{}},
				"webpack.dev.conf.js": {Func: bindataStaticMurmurvueBuildWebpackdevconfjs, Children: map[string]*bintree{}},
				"webpack.prod.conf.js": {Func: bindataStaticMurmurvueBuildWebpackprodconfjs, Children: map[string]*bintree{}},
			}},
			"config": {Func: nil, Children: map[string]*bintree{
				"dev.env.js": {Func: bindataStaticMurmurvueConfigDevenvjs, Children: map[string]*bintree{}},
				"index.js": {Func: bindataStaticMurmurvueConfigIndexjs, Children: map[string]*bintree{}},
				"prod.env.js": {Func: bindataStaticMurmurvueConfigProdenvjs, Children: map[string]*bintree{}},
			}},
			"index.html": {Func: bindataStaticMurmurvueIndexhtml, Children: map[string]*bintree{}},
			"package.json": {Func: bindataStaticMurmurvuePackagejson, Children: map[string]*bintree{}},
			"src": {Func: nil, Children: map[string]*bintree{
				"App.vue": {Func: bindataStaticMurmurvueSrcAppvue, Children: map[string]*bintree{}},
				"components": {Func: nil, Children: map[string]*bintree{
					"ProfileMine.vue": {Func: bindataStaticMurmurvueSrcComponentsProfileMinevue, Children: map[string]*bintree{}},
				}},
				"main.js": {Func: bindataStaticMurmurvueSrcMainjs, Children: map[string]*bintree{}},
				"router": {Func: nil, Children: map[string]*bintree{
					"index.js": {Func: bindataStaticMurmurvueSrcRouterIndexjs, Children: map[string]*bintree{}},
				}},
			}},
			"static": {Func: nil, Children: map[string]*bintree{
				".gitkeep": {Func: bindataStaticMurmurvueStaticGitkeep, Children: map[string]*bintree{}},
				"imgs": {Func: nil, Children: map[string]*bintree{
					"avatar.jpg": {Func: bindataStaticMurmurvueStaticImgsAvatarjpg, Children: map[string]*bintree{}},
					"fav.ico": {Func: bindataStaticMurmurvueStaticImgsFavico, Children: map[string]*bintree{}},
				}},
			}},
			"yarn.lock": {Func: bindataStaticMurmurvueYarnlock, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
